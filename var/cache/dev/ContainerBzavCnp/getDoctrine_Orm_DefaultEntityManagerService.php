<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the public 'doctrine.orm.default_entity_manager' shared service.

include_once $this->targetDirs[3].'/vendor/doctrine/persistence/lib/Doctrine/Common/Persistence/ObjectManager.php';
include_once $this->targetDirs[3].'/vendor/doctrine/orm/lib/Doctrine/ORM/EntityManagerInterface.php';
include_once $this->targetDirs[3].'/vendor/doctrine/orm/lib/Doctrine/ORM/EntityManager.php';
include_once $this->targetDirs[3].'/vendor/doctrine/dbal/lib/Doctrine/DBAL/Configuration.php';
include_once $this->targetDirs[3].'/vendor/doctrine/orm/lib/Doctrine/ORM/Configuration.php';
include_once $this->targetDirs[3].'/vendor/doctrine/persistence/lib/Doctrine/Common/Persistence/Mapping/Driver/MappingDriver.php';
include_once $this->targetDirs[3].'/vendor/doctrine/persistence/lib/Doctrine/Common/Persistence/Mapping/Driver/MappingDriverChain.php';
include_once $this->targetDirs[3].'/vendor/doctrine/persistence/lib/Doctrine/Common/Persistence/Mapping/Driver/AnnotationDriver.php';
include_once $this->targetDirs[3].'/vendor/doctrine/orm/lib/Doctrine/ORM/Mapping/Driver/AnnotationDriver.php';
include_once $this->targetDirs[3].'/vendor/doctrine/orm/lib/Doctrine/ORM/Mapping/NamingStrategy.php';
include_once $this->targetDirs[3].'/vendor/doctrine/orm/lib/Doctrine/ORM/Mapping/UnderscoreNamingStrategy.php';
include_once $this->targetDirs[3].'/vendor/doctrine/orm/lib/Doctrine/ORM/Mapping/QuoteStrategy.php';
include_once $this->targetDirs[3].'/vendor/doctrine/orm/lib/Doctrine/ORM/Mapping/DefaultQuoteStrategy.php';
include_once $this->targetDirs[3].'/vendor/doctrine/orm/lib/Doctrine/ORM/Mapping/EntityListenerResolver.php';
include_once $this->targetDirs[3].'/vendor/doctrine/doctrine-bundle/Mapping/EntityListenerServiceResolver.php';
include_once $this->targetDirs[3].'/vendor/doctrine/doctrine-bundle/Mapping/ContainerAwareEntityListenerResolver.php';
include_once $this->targetDirs[3].'/vendor/doctrine/orm/lib/Doctrine/ORM/Repository/RepositoryFactory.php';
include_once $this->targetDirs[3].'/vendor/doctrine/doctrine-bundle/Repository/ContainerRepositoryFactory.php';
include_once $this->targetDirs[3].'/vendor/doctrine/doctrine-bundle/ManagerConfigurator.php';

$a = new \Doctrine\ORM\Configuration();

$b = new \Doctrine\Common\Persistence\Mapping\Driver\MappingDriverChain();
$b->addDriver(new \Doctrine\ORM\Mapping\Driver\AnnotationDriver(($this->privates['annotations.cached_reader'] ?? $this->getAnnotations_CachedReaderService()), [0 => ($this->targetDirs[3].'/src/Entity')]), 'App\\Entity');

$a->setEntityNamespaces(['App' => 'App\\Entity']);
$a->setMetadataCacheImpl(($this->services['doctrine_cache.providers.doctrine.orm.default_metadata_cache'] ?? $this->load('getDoctrineCache_Providers_Doctrine_Orm_DefaultMetadataCacheService.php')));
$a->setQueryCacheImpl(($this->services['doctrine_cache.providers.doctrine.orm.default_query_cache'] ?? $this->load('getDoctrineCache_Providers_Doctrine_Orm_DefaultQueryCacheService.php')));
$a->setResultCacheImpl(($this->services['doctrine_cache.providers.doctrine.orm.default_result_cache'] ?? $this->load('getDoctrineCache_Providers_Doctrine_Orm_DefaultResultCacheService.php')));
$a->setMetadataDriverImpl($b);
$a->setProxyDir(($this->targetDirs[0].'/doctrine/orm/Proxies'));
$a->setProxyNamespace('Proxies');
$a->setAutoGenerateProxyClasses(true);
$a->setClassMetadataFactoryName('Doctrine\\ORM\\Mapping\\ClassMetadataFactory');
$a->setDefaultRepositoryClassName('Doctrine\\ORM\\EntityRepository');
$a->setNamingStrategy(new \Doctrine\ORM\Mapping\UnderscoreNamingStrategy());
$a->setQuoteStrategy(new \Doctrine\ORM\Mapping\DefaultQuoteStrategy());
$a->setEntityListenerResolver(new \Doctrine\Bundle\DoctrineBundle\Mapping\ContainerAwareEntityListenerResolver($this));
$a->setRepositoryFactory(new \Doctrine\Bundle\DoctrineBundle\Repository\ContainerRepositoryFactory(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
    'App\\Repository\\CharpenteRepository' => ['privates', 'App\\Repository\\CharpenteRepository', 'getCharpenteRepositoryService.php', true],
    'App\\Repository\\ClimatisationRepository' => ['privates', 'App\\Repository\\ClimatisationRepository', 'getClimatisationRepositoryService.php', true],
    'App\\Repository\\CloisonRepository' => ['privates', 'App\\Repository\\CloisonRepository', 'getCloisonRepositoryService.php', true],
    'App\\Repository\\CloisonsRepository' => ['privates', 'App\\Repository\\CloisonsRepository', 'getCloisonsRepositoryService.php', true],
    'App\\Repository\\DomotiqueRepository' => ['privates', 'App\\Repository\\DomotiqueRepository', 'getDomotiqueRepositoryService.php', true],
    'App\\Repository\\ElectriciteRepository' => ['privates', 'App\\Repository\\ElectriciteRepository', 'getElectriciteRepositoryService.php', true],
    'App\\Repository\\ElevationRepository' => ['privates', 'App\\Repository\\ElevationRepository', 'getElevationRepositoryService.php', true],
    'App\\Repository\\EnduitRepository' => ['privates', 'App\\Repository\\EnduitRepository', 'getEnduitRepositoryService.php', true],
    'App\\Repository\\EscaliersRepository' => ['privates', 'App\\Repository\\EscaliersRepository', 'getEscaliersRepositoryService.php', true],
    'App\\Repository\\EtudeSolRepository' => ['privates', 'App\\Repository\\EtudeSolRepository', 'getEtudeSolRepositoryService.php', true],
    'App\\Repository\\EvacuationFumeesRepository' => ['privates', 'App\\Repository\\EvacuationFumeesRepository', 'getEvacuationFumeesRepositoryService.php', true],
    'App\\Repository\\ExcavationRepository' => ['privates', 'App\\Repository\\ExcavationRepository', 'getExcavationRepositoryService.php', true],
    'App\\Repository\\FondationRepository' => ['privates', 'App\\Repository\\FondationRepository', 'getFondationRepositoryService.php', true],
    'App\\Repository\\GrosOeuvreRepository' => ['privates', 'App\\Repository\\GrosOeuvreRepository', 'getGrosOeuvreRepositoryService.php', true],
    'App\\Repository\\IsolationRepository' => ['privates', 'App\\Repository\\IsolationRepository', 'getIsolationRepositoryService.php', true],
    'App\\Repository\\MenuiserieRepository' => ['privates', 'App\\Repository\\MenuiserieRepository', 'getMenuiserieRepositoryService.php', true],
    'App\\Repository\\MenuiseriesIntRepository' => ['privates', 'App\\Repository\\MenuiseriesIntRepository', 'getMenuiseriesIntRepositoryService.php', true],
    'App\\Repository\\PlancherRepository' => ['privates', 'App\\Repository\\PlancherRepository', 'getPlancherRepositoryService.php', true],
    'App\\Repository\\PlomberieRepository' => ['privates', 'App\\Repository\\PlomberieRepository', 'getPlomberieRepositoryService.php', true],
    'App\\Repository\\PreparationEtAccesRepository' => ['privates', 'App\\Repository\\PreparationEtAccesRepository', 'getPreparationEtAccesRepositoryService.php', true],
    'App\\Repository\\PrixRepository' => ['privates', 'App\\Repository\\PrixRepository', 'getPrixRepositoryService.php', true],
    'App\\Repository\\ProjetRepository' => ['privates', 'App\\Repository\\ProjetRepository', 'getProjetRepositoryService.php', true],
    'App\\Repository\\RemoveUserRepository' => ['privates', 'App\\Repository\\RemoveUserRepository', 'getRemoveUserRepositoryService.php', true],
    'App\\Repository\\RevetementRepository' => ['privates', 'App\\Repository\\RevetementRepository', 'getRevetementRepositoryService.php', true],
    'App\\Repository\\SecondOeuvreRepository' => ['privates', 'App\\Repository\\SecondOeuvreRepository', 'getSecondOeuvreRepositoryService.php', true],
    'App\\Repository\\SoubassementRepository' => ['privates', 'App\\Repository\\SoubassementRepository', 'getSoubassementRepositoryService.php', true],
    'App\\Repository\\ToitureRepository' => ['privates', 'App\\Repository\\ToitureRepository', 'getToitureRepositoryService.php', true],
    'App\\Repository\\VentilationRepository' => ['privates', 'App\\Repository\\VentilationRepository', 'getVentilationRepositoryService.php', true],
    'App\\Repository\\VrdRepository' => ['privates', 'App\\Repository\\VrdRepository', 'getVrdRepositoryService.php', true],
])));

$this->services['doctrine.orm.default_entity_manager'] = $instance = \Doctrine\ORM\EntityManager::create(($this->services['doctrine.dbal.default_connection'] ?? $this->load('getDoctrine_Dbal_DefaultConnectionService.php')), $a);

(new \Doctrine\Bundle\DoctrineBundle\ManagerConfigurator([], []))->configure($instance);

return $instance;
